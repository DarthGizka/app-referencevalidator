@Library('gematik-jenkins-shared-library') _
 
def CREDENTIAL_ID_GEMATIK_GIT = 'GITLAB.tst_tt_build.Username_Password'
def BRANCH = 'master'
def JIRA_PROJECT_ID = 'REFV'
def GITLAB_PROJECT_ID = '1057'
def TAG_NAME = 'ci-build'
def POM_PATH = 'de.gematik.refv/pom.xml'
def DOCKER_FILE = "Dockerfile"
def IMAGE_NAME = "refv/referencevalidator"
def DOCKER_VERSION = "latest"

pipeline {
 
    options {
        disableConcurrentBuilds()
    }
    agent { label 'k8-maven' }

    stages {
        stage('Get Jira Version') {
            steps {
                script {
                    JIRA_VERSION = jiraCheckAndGetSingleVersion(jiraGetVersions(JIRA_PROJECT_ID))
                }
            }
        }

        stage('Generate Feature Tag') {
            when { not { branch BRANCH } }
            steps {
                script {
                    DOCKER_VERSION = extendsVersionWithFeatureBranch()
                }
            }
        }

        stage('gitCreateBranch') {
            when { branch BRANCH }
            steps {
                gitCreateBranch()
            }
        }
 
        stage('set Version') {
            steps {
                mavenSetVersionFromJiraProject(JIRA_PROJECT_ID, POM_PATH)
            }
        }
 
        stage('Build') {
            steps {
                mavenBuild(POM_PATH)
            }
        }
 
        stage('Test') {
            steps {
                mavenTest(POM_PATH)
            }
        }
         
        stage('OWASP') {
            steps {
                mavenOwaspScan(POM_PATH)
            }
        }
 
        stage('Sonar') {
            steps {
                mavenCheckWithSonarQube(POM_PATH, "", false)
            }
        }
 
        stage('deploy') {
            when { branch BRANCH }
            steps {
                mavenDeploy(POM_PATH)
            }
        }

//        stage('DockerBuild') {
//            steps {
//                dockerBuild(IMAGE_NAME, DOCKER_VERSION, JIRA_VERSION, "", DOCKER_FILE)
//            }
//        }
//
//        stage('Switch to Docker-Agent') {
//            agent { label 'k8-docker' }
//            stages {
//                stage('Vulnerabilities-Scan Report with ALL') {
//                    steps {
//                        trivyVulnerabilitiesScanAllAsHtml(IMAGE_NAME, DOCKER_VERSION)
//                    }
//                }
//                stage('Vulnerabilities-Scan LOW,MEDIUM') {
//                    steps {
//                        trivyVulnerabilitiesScanLowMedium(IMAGE_NAME, DOCKER_VERSION)
//                        }
//                }
//                stage('Vulnerabilities-Scan HIGH,CRITICAL') {
//                    steps {
//                        trivyVulnerabilitiesScanHighCritical(IMAGE_NAME, DOCKER_VERSION, 1)
//                    }
//                }
//                stage('Vulnerabilities-Scan Unfixed CRITICAL') {
//                    steps {
//                        trivyVulnerabilitiesScanCriticalUnfixed(IMAGE_NAME, DOCKER_VERSION)
//                    }
//                }
//            }
//        }
//
//        stage('push Dockerimage') {
//            when { branch BRANCH }
//            steps {
//                dockerPushImage(IMAGE_NAME, DOCKER_VERSION)
//            }
//        }

        stage('Tag and Push CI-build') {
            when { branch BRANCH }
            steps {
                gitCreateAndPushTag(JIRA_PROJECT_ID)
            }
        }
 
        stage('GitLab-Update-Snapshot') {
            when { branch BRANCH }
            steps {
                gitLabUpdateMavenSnapshot(JIRA_PROJECT_ID, GITLAB_PROJECT_ID, POM_PATH)
            }
        }
    }
    post {
        always {
//            dockerRemoveLocalImage(IMAGE_NAME, DOCKER_VERSION)
        }
    }
 
}